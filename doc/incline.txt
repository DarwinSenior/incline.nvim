*incline.txt*       Lightweight floating statuslines.       *incline* *incline.nvim*

Author:         Maddison Hellstrom <https://github.com/b0o/>
Licence:        MIT
Homepage:       https://github.com/b0o/incline.nvim
Version:        0.0.2

==============================================================================
CONTENTS                                                      *incline-contents*

  1. Intro ...................................... |incline-intro|
  2. Usage ...................................... |incline-usage|
    2.1. Functions .............................. |incline-functions|
    2.2. Configuration .......................... |incline-config|
    2.3. Default Configuration .................. |incline-default-config|
  3. Changelog .................................. |incline-changelog|
  4. License .................................... |incline-license|

==============================================================================
1. Intro                                                         *incline-intro*

Incline provides lightweight floating statuslines, intended for use with
Neovim's new global statusline.

==============================================================================
2. Usage                                                         *incline-usage*

Incline is disabled by default. To enable it, you must call either
|incline.setup()| or |incline.enable()|.

------------------------------------------------------------------------------
2.1 Functions                                                *incline-functions*

  `incline.setup({config})`                                      *incline.setup()*
    Applies the configuration options and enables Incline.
    Takes an optional `config` table (see |incline-config|).
    Can be called multiple times to change configuration options.

  `incline.enable()`                                            *incline.enable()*
    Enables Incline.

  `incline.disable()`                                          *incline.disable()*
    Disables Incline.

  `incline.toggle()`                                            *incline.toggle()*
    Toggles Incline.

  `incline.is_enabled()`                                    *incline.is_enabled()*
    Returns `true` if Incline is enabled, else `false`.

------------------------------------------------------------------------------
2.2 Configuration                                               *incline-config*

  The `config` argument to |incline.setup()| is a table that can contain the
  following fields and sub-fields:

    render                      |incline-config-render|
    debounce_threshold          |incline-config-debounce_threshold|
    window.width                |incline-config-window.width|
    window.placement.vertical   |incline-config-window.placement.vertical|
    window.placement.horizontal |incline-config-window.placement.horizontal|
    window.margin.vertical      |incline-config-window.margin.vertical|
    window.margin.horizontal    |incline-config-window.margin.horizontal|
    window.padding              |incline-config-window.padding|
    window.padding_char         |incline-config-window.padding_char|
    window.zindex               |incline-config-window.zindex|
    window.options              |incline-config-window.options|
    ignore.unlisted_buffers     |incline-config-ignore.unlisted_buffers|
    ignore.floating_wins        |incline-config-ignore.floating_wins|
    ignore.filetypes            |incline-config-ignore.filetypes|
    ignore.buftypes             |incline-config-ignore.buftypes|
    ignore.wintypes             |incline-config-ignore.wintypes|
    hide.focused_win            |incline-config-hide.focused_win|

                                         *incline-render*  *incline-config-render*
render~
  Type:     `function`
  Valid:    `function({ buf: number, win: number }) -> string`
  Default:  See |incline-default-config|

  The `render` function is evaluated on each update and its return value is
  displayed in the Incline statusline.

  The function is called for each Incline statusline in the current |tabpage|.
  It is passed a single argument, `props`, which is a table containing the
  following fields:

    Field  Type     Description
    `buf`    `number`   The buffer handle for the target window.
    `win`    `number`   The window handle for the target window.

  The function should return a string.

                                             *incline-config-debounce_threshold*
debounce_threshold~
  Type:     `number` | `table`
  Valid:    `int >= 0` | `table { rising: int >= 0, falling: int >= 0 }`
  Default:  `{ rising = 10, falling = 50 }`

  When certain events occur, like opening a file, Incline re-renders all of
  the floating statuslines on the current tabpage. Additionally, certain
  events like resizing or opening windows cause Incline to re-calculate the
  size and layout of the floating statuslines in the current tabpage.

  If multiple events occur within a short period of time, they are batched
  together into a single update. The `debounce_threshold` option controls the
  minimum amount of time between updates.

  When the first event arrives, Incline waits `debounce_threshold.rising`
  milliseconds and then performs the update. If an event occurs sooner than
  `debounce_threshold.falling` milliseconds after an update, Incline waits
  `debounce_threshold.falling` milliseconds before performing another update.

  If `debounce_threshold` is set to an integer, that value is used for both
  `rising` and `falling`.
  If `debounce_threshold` is set to a table, both `rising` and `falling`
  fields must be present.

                                                   *incline-config-window.width*
window.width~
  Type:    `number` | `string`
  Valid:   `int >= 2` | `0.0 < float <= 1.0` | `"fit"` | `"fill"`
  Default: `"fit"`

  Controls the width of Incline statuslines:
  - If `int >= 2`, each statusline is `width` columns wide.
  - If `0.0 < float <= 1.0`, the width is calculated as a percentage of the
    window width.
  - If `"fit"`, the statusline is as wide as its content.
  - If `"fill"`, the statusline is as wide as the window.

                                      *incline-config-window.placement.vertical*
window.placement.vertical~
  Type:    `string`
  Valid:   `"top"` | `"bottom"`
  Default: `"top"`

  Controls the vertical placement of Incline statuslines.

                                     *incline-config-window.placement.horizontal*
window.placement.horizontal~
  Type:    `string`
  Valid:   `"left"` | `"center"` | `"right"`
  Default: `"right"`

  Controls the horizontal placement of Incline statuslines.

                                         *incline-config-window.margin.vertical*
window.margin.vertical~
  Type:    `number` | `table`
  Valid:   `int >= 0` | `table { top: int >= 0, bottom: int >= 0 }`
  Default: `{ top = 1, bottom = 0 }`

  Controls the margin between the statusline and the top/bottom edges of the
  window.
  - If an `int >= 0`, the value is used for both the top and bottom margin.
  - If a table, both `top` and `bottom` fields must be present.

                                       *incline-config-window.margin.horizontal*
window.margin.horizontal~
  Type:    `number` | `table`
  Valid:   `int >= 0` | `table { left: int >= 0, right: int >= 0 }`
  Default: `{ left = 1, right = 1 }`

  Controls the margin between the statusline and the left/right edges of the
  window.
  - If an `int`, the value is used for both the left and right margin.
  - If a table, both `left` and `right` fields must be present.

                                                 *incline-config-window.padding*
window.padding~
  Type:    `number` | `table`
  Valid:   `int >= 0` | `table { left: int >= 0, right: int >= 0 }`
  Default: `{ left = 1, right = 1 }`

  Controls the amount of padding inside the Incline statusline.
  See |incline-config-window.padding_char|.

                                            *incline-config-window.padding_char*
window.padding_char~
  Type:    `string`
  Valid:   `length(padding_char) == 1`
  Default: `" "`

  Controls the character used for padding the Incline statusline.
  See |incline-config-window.padding|.

                                                  *incline-config-window.zindex*
window.zindex~
  Type:     `number`
  Valid:    `int >= 1`
  Default:  `50`

  Controls the z-index of the floating statusline. See the zindex section of
  |api-win_config| for more information.

                                                 *incline-config-window.options*
window.options~
  Type:      `table`
  Valid:     `map[string]string`
  Transform: `extend` (|incline-config-transforms| |incline-transform-extend|)
  Default: >
    {
      winhighlight = 'Search:None,EndOfBuffer:None',
      wrap = false,
      signcolumn = false,
    }
<
  A dictionary-like table of |local-options| to set on Incline windows.

  Note that, when setting this option, the map that you pass extends the
  default values, rather than replacing them. See |incline-config-transforms|.

                                        *incline-config-ignore.unlisted_buffers*
ignore.unlisted_buffers~
  Type:     `bool`
  Default:  `true`

  If `true`, Incline will not display statuslines on windows containing unlisted
  buffers.

                                           *incline-config-ignore.floating_wins*
ignore.floating_wins~
  Type:     `bool`
  Default:  `true`

  If `true`, Incline will not display statuslines on floating windows.

                                               *incline-config-ignore.filetypes*
ignore.filetypes~
  Type:     `table`
  Valid:    `[]string`
  Default:  `{}`

  Incline will not display a statusline on any window containing a buffer with
  an ignored filetype.

                                                *incline-config-ignore.buftypes*
ignore.buftypes~
  Type:     `string` | `table` | `function`
  Valid:    `"special"` | `[]buftype` | `function(bufnr, buftype) -> bool`
  Default:  `"special"`

  Incline will not display a statusline on any window containing a buffer with
  an ignored 'buftype'.
  - If the string `"special"`, Incline will only display statuslines on windows
    containing normal buffers (buffers that have a buftype of `""`).
  - If a table, the table should be a list of buftypes to ignore. See 'buftype'
    for accepted values.
  - If a function, it should accept two arguments, `bufnr` and `buftype`, and
    return `true` if the buffer should be ignored.

                                                *incline-config-ignore.wintypes*
ignore.wintypes~
  Type:     `string` | `table` | `function`
  Valid:    `"special"` | `[]wintype` | `function(winid, wintype) -> bool`
  Default:  `"special"`

  Incline will not display a statusline on any window with an ignored wintype.
  - If the string `"special"`, Incline will only display statuslines on normal
    windows (windows that have a wintype of `""`).
  - If a table, the table should be a list of wintypes to ignore.
    See |win_gettype()| for accepted values.
  - If a function, it should accept two arguments, `winid` and `wintype`, and
    return `true` if the window should be ignored.

                                               *incline-config-hide.focused_win*
hide.focused_win~
  Type:     `bool`
  Default:  `false`

  If `true`, Incline will hide the statusline for the focused window.

------------------------------------------------------------------------------
2.3 Default Configuration                               *incline-default-config*
>
  {
    debounce_threshold = { falling = 50, rising = 10 },
    hide = { focused_win = false, },
    ignore = {
      buftypes = "special",
      filetypes = {},
      floating_wins = true,
      unlisted_buffers = true,
      wintypes = "special",
    },
    render = function(props)
      local bufname = vim.api.nvim_buf_get_name(props.buf)
      if bufname == '' then
        return '[No name]'
      else
        bufname = vim.fn.fnamemodify(bufname, ':t')
      end
      return bufname
    end,
    window = {
      margin = {
        horizontal = { left = 1, right = 1 },
        vertical = { bottom = 0, top = 1 },
      },
      options = {
        signcolumn = "no",
        winhighlight = "Search:None,EndOfBuffer:None",
        wrap = false
      },
      padding = { left = 1, right = 1 },
      padding_char = " ",
      placement = { horizontal = "right", vertical = "top", },
      width = "fit",
      zindex = 50,
    },
  }
<

NOTE: Most users do not need to worry about transforms. The defaults will work
fine for most cases.

When assigning to configuration fields, the way your options are applied
varies depending on the field. Some fields are replaced entirely by the value
you pass, while other fields are extended by the value you pass. These
behaviors are called transforms.

If a configuration option uses a transform by default, the transform will be
noted in the option's documentation. If the transform behavior is not
specified, that means that the user-configured value will fully replace the
default value.

For example, the `window.options` field has a default transform of `extend`.
This means that user-configured options extend the default options rather than
replacing them. For example:
>
  > -- Before:
  > -- Print out the default value of window.options
  > print(vim.inspect(require'incline.config'.window.options)
  {
      signcolumn = "no",
      winhighlight = "Search:None,EndOfBuffer:None",
      wrap = false
    }
  >
  > -- Call setup() to apply the configuration
  > require'incline'.setup {
      window = {
        options = {
          winblend = 10,
        },
      },
    }
  >
  > -- After:
  > -- Print out the updated value of window.options
  > print(vim.inspect(require'incline.config'.window.options)
  {
    signcolumn = "no",
    winblend = 10,
    winhighlight = "Search:None,EndOfBuffer:None",
    wrap = false
  }
<
                                                    *incline-transform-override*
Overriding default transforms~
It is possible to override the default transform by explicity specifying the
one you want to use. To do this, use one of the transform functions exported
by `incline.config`.

That is, instead of: >
  local incline = require'incline'`
  incline.setup { window = { options = { winblend = 10 } }`
<
You can use: >
  local incline = require'incline'
  local config = require'incline.config'
  incline.setup { window = { options = config.replace { winblend = 10 } }
<
Another example, following the example from the previous section:
>
  > -- Before:
  > -- Print out the default value of window.options
  > print(vim.inspect(require'incline.config'.window.options)
  {
      signcolumn = "no",
      winhighlight = "Search:None,EndOfBuffer:None",
      wrap = false
    }
  >
  > -- Call setup() to apply the configuration
  > require'incline'.setup {
      window = {
        options = require'incline.config'.replace {
          winblend = 10,
        },
      },
    }
  >
  > -- After:
  > -- Print out the updated value of window.options
  > print(vim.inspect(require'incline.config'.window.options)
  {
    winblend = 10,
  }
<
                                                    *incline-builtin-transforms*
Built-in transforms~
                                                     *incline-transform-replace*
replace~
  Fully replaces the default value of the configuration option. This is the
  default transform if none is specified in the option's documentation.
>
    require'incline.config'.replace
<
                                                     *incline-transform-replace*
extend~
  Extends the default value of the option. Only valid for options with default
  values that are list-like or dict-like tables.
>
    require'incline.config'.extend
<
------------------------------------------------------------------------------
2.3 Default Configuration                               *incline-default-config*
>
  {
    debounce_threshold = { falling = 50, rising = 10 },
    hide = { focused_win = false, },
    ignore = {
      buftypes = "special",
      filetypes = {},
      floating_wins = true,
      unlisted_buffers = true,
      wintypes = "special",
    },
    render = function(props)
      local bufname = vim.api.nvim_buf_get_name(props.buf)
      if bufname == '' then
        return '[No name]'
      else
        bufname = vim.fn.fnamemodify(bufname, ':t')
      end
      return bufname
    end,
    window = {
      margin = {
        horizontal = { left = 1, right = 1 },
        vertical = { bottom = 0, top = 1 },
      },
      options = {
        signcolumn = "no",
        winhighlight = "Search:None,EndOfBuffer:None",
        wrap = false
      },
      padding = { left = 1, right = 1 },
      padding_char = " ",
      placement = { horizontal = "right", vertical = "top", },
      width = "fit",
      zindex = 50,
    },
  }
<
==============================================================================
3. Changelog                                                 *incline-changelog*

14 Apr 2022                                                             v0.0.2
  Add documentation
  Make position, size, and content configurable
  Validate user configuration against schema
  Add tests for configuration and schema
  Refactor, fix bugs, and improve stability

07 Apr 2022                                                             v0.0.1
  Initial Release

==============================================================================
4. License                                                     *incline-license*
>
  MIT License

  © 2022 Maddison Hellstrom <github.com/b0o>

  Full license information is available in the LICENSE file at the root of
  this repository.
<
 vim:tw=78:ts=8:ft=help:norl:
